variables:
  IMAGE_NAME: dilozy/flask_micro
  SERVICE_A_IMAGE_TAG: 1.0.0-service_a
  SERVICE_B_IMAGE_TAG: 1.0.0-service_b

stages:
  - build
  - test
  - lint

build_service_a_image:
  stage: build
  image: docker:28.4.0-rc.2-cli-alpine3.22
  services:
    - name: docker:28.4.0-rc.2-dind-alpine3.22
      alias: docker
  before_script:
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASS
  script:
    - docker build -t $IMAGE_NAME:$SERVICE_A_IMAGE_TAG -f ./service_a/Dockerfile .
    - docker push $IMAGE_NAME:$SERVICE_A_IMAGE_TAG

build_service_b_image:
  stage: build
  image: docker:28.4.0-rc.2-cli-alpine3.22
  services:
    - name: docker:28.4.0-rc.2-dind-alpine3.22
      alias: docker
  before_script:
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASS
  script:
    - docker build -t $IMAGE_NAME:$SERVICE_B_IMAGE_TAG -f ./service_b/Dockerfile .
    - docker push $IMAGE_NAME:$SERVICE_B_IMAGE_TAG

run_service_a_tests:
  stage: test
  image: docker:28.4.0-rc.2-cli-alpine3.22
  services:
    - name: docker:28.4.0-rc.2-dind-alpine3.22
      alias: docker
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
    DB_URL: $SERVICE_A_DB_URL
    RABBIT_USER: $RABBIT_USER
    RABBIT_PASS: $RABBIT_PASS      
    CHECK_OUTBOX_EVENTS_EVERY: 10
    RABBITMQ_DEFAULT_USER: $RABBIT_USER
    RABBITMQ_DEFAULT_PASS: $RABBIT_PASS 
    POSTGRES_USER: $SERVICE_A_DB_USER
    POSTGRES_PASSWORD: $SERVICE_A_DB_PASSWORD
    POSTGRES_DB: $SERVICE_A_DB_NAME
  before_script:
    - apk add --no-cache docker-compose
  script:
    - docker-compose up -d --no-deps service_a service_a_postgres service_a_worker service_a_celery_beat rabbitmq
    - echo "Ждем, пока стек поднимется..."
    - sleep 10
    - docker-compose exec -T service_a poetry run flask --app web_app.main:app db upgrade
    - docker-compose exec -T service_a poetry run pytest
  after_script:
    - docker-compose down -v

run_service_b_tests:
  stage: test
  image: docker:28.4.0-rc.2-cli-alpine3.22
  services:
    - name: docker:28.4.0-rc.2-dind-alpine3.22
      alias: docker
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
    DB_URL: $SERVICE_B_DB_URL
    RABBIT_USER: $RABBIT_USER
    RABBIT_PASS: $RABBIT_PASS     
    CHECK_OUTBOX_EVENTS_EVERY: 10
    RABBITMQ_DEFAULT_USER: $RABBIT_USER
    RABBITMQ_DEFAULT_PASS: $RABBIT_PASS
    POSTGRES_USER: $SERVICE_B_DB_USER
    POSTGRES_PASSWORD: $SERVICE_B_DB_PASSWORD
    POSTGRES_DB: $SERVICE_B_DB_NAME
  before_script:
    - apk add --no-cache docker-compose
  script:
    - docker-compose up -d --no-deps service_b service_b_postgres rabbitmq
    - echo "Ждем, пока стек поднимется..."
    - sleep 10
    - docker-compose exec -T service_b poetry run flask --app web_app.main:app db upgrade
    - docker-compose exec -T service_b poetry run pytest
  after_script:
    - docker-compose down -v